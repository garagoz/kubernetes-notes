
# ----------------------------------- DEPLOYMENTS ------------------------------------

This command will monitor the rollout progress and display the status of the deployment.
kubectl rollout status deployment/my-app

updating image at deployement
kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1

To see the rollout history:
kubectl rollout history deployment/nginx-deployment

If something goes wrong with the new version, you can roll back to the previous version:
kubectl rollout undo deployment/nginx-deployment

You can also roll back to a specific revision:
kubectl rollout undo deployment/nginx-deployment --to-revision=2

### ----------------- Commands and arguments -----------------------------

Commands and arguments can be specified in a Pod or Containe. These are often used to override the default 
command and arguments set in the Docker image.

Here’s a breakdown:
command: This overrides the Docker image’s ENTRYPOINT.
args: These are the arguments passed to the command and override the Docker image’s CMD.


  containers:
  - name: ubuntu
    image: ubuntu
    command: ["sleep", "500"]      # This overrides the ENTRYPOINT
    args: ["echo Hello, Kubernetes! && sleep 3600"]  # This overrides the CMD

### ----------------- ENV variables and ConfigMaps -----------------------------

Using Environment value at Pod 
env:
  - name: APP_COLOR
    value: blue

Creating configmap from imperative way
kubectl create configmap my-config --from-literal=APP_COLOR=blue

Creating configmap from declarative way
    apiVersion: v1
    kind: ConfigMap
    metadata:
    name: app-config
    data:
    APP_COLOR: blue
    APP_MODE: prod

ConfigMaps at definition files
    apiVersion: v1
    kind: Pod
    metadata:
      name: my-pod
    spec:
      containers:
        - name: my-container
          image: nginx
          env:
            - name: APP_NAME          # Set environment variable from ConfigMap
              valueFrom:
                configMapKeyRef:
                  name: my-config     # Reference to ConfigMap
                  key: app_name

    Second way:
    envFrom:
      - configMapRef:
          name: app-config


### ----------------- SECRETS -----------------------------

1. Imperative Method: kubectl create secret generic my-secret --from-literal=username=myUser --from-literal=password=myPassword

2. Declarative Method

    Step 1: Base64 Encode the Data
    echo -n 'myUser' | base64
    echo -n 'myPassword' | base64

    ps: to decode it -> echo "" | base64 --decode

    Step 2: Create a Secret YAML Definition
    apiVersion: v1
    kind: Secret
    metadata:
      name: my-secret
    type: Opaque
    data:
      username: bXlVc2Vy     # base64 encoded value for 'myUser'
      password: bXlQYXNzd29yZA==  # base64 encoded value for 'myPassword'