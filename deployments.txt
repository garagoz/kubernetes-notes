
# ----------------------------------- DEPLOYMENTS ------------------------------------

This command will monitor the rollout progress and display the status of the deployment.
kubectl rollout status deployment/my-app

updating image at deployement
kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1

To see the rollout history:
kubectl rollout history deployment/nginx-deployment

If something goes wrong with the new version, you can roll back to the previous version:
kubectl rollout undo deployment/nginx-deployment

You can also roll back to a specific revision:
kubectl rollout undo deployment/nginx-deployment --to-revision=2

### ----------------- Commands and arguments -----------------------------

Commands and arguments can be specified in a Pod or Containe. These are often used to override the default 
command and arguments set in the Docker image.

Here’s a breakdown:
command: This overrides the Docker image’s ENTRYPOINT.
args: These are the arguments passed to the command and override the Docker image’s CMD.


  containers:
  - name: ubuntu
    image: ubuntu
    command: ["sleep", "500"]      # This overrides the ENTRYPOINT
    args: ["echo Hello, Kubernetes! && sleep 3600"]  # This overrides the CMD

### ----------------- ENV variables and ConfigMaps -----------------------------

Using Environment value at Pod 
env:
  - name: APP_COLOR
    value: blue

Creating configmap from imperative way
kubectl create configmap my-config --from-literal=APP_COLOR=blue

Creating configmap from declarative way
    apiVersion: v1
    kind: ConfigMap
    metadata:
    name: app-config
    data:
    APP_COLOR: blue
    APP_MODE: prod