# ----------------------------------- SCHEDULING ------------------------------------

### ------------ Taint and tolerations -----------------------------

tain a node so that node can only accepted tolerated pod
tolerate a pod so that pod can run on tainted node

kubectl taint node node-name key:value:tain-effect (NoSchedule, PreferNoSchedule, NoExecute)
example -> kubectl taint node node1 app:blue:NoSchedule

### adding tolerations to pod
    apiVersion: v1
    kind: Pod
    metadata:
      name: mypod
    spec:
      containers:
      - name: nginx
        image: nginx
      tolerations:
        - key: app
          operator: Equal
          value: blue
          effect: NoSchedule

### ------------ Node selector -----------------------------

why use nodeSelector, sometimes we want assign pod to specific labeled pod
kubectl label node node-name key:value

And pod     
    apiVersion: v1
    kind: Pod
    metadata:
      name: mypod
    spec:
      containers:
      - name: nginx
        image: nginx
      nodeSelector:
        Size: Large

### ------------ nodeAffinity  -----------------------------

nodeAffinity types:
Avaiable
1. requiredDuringSchedulingIgnoredDuringExecution
2. preferredDuringSchedulingIgnoredDuringExecution

Planned:
1. requiredDuringSchedulingRequiredDuringExecution
2. preferredDuringSchedulingIgnoredRequiredExecution

Operators -> In, NotIn, Exists

    apiVersion: v1
    kind: Pod
    metadata:
    name: node-affinity-example
    spec:
    affinity:
        nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
            - key: kubernetes.io/e2e-az-name
                operator: In
                values:
                - e2e-az1
                - e2e-az2

### ------------ Pod CPU and MEMORY setting  -----------------------------

 while creating pod we can set cpu and memory setting for the pods
    apiVersion: v1
    kind: Pod
    metadata:
      name: resource-demo
    spec:
      containers:
      - name: resource-container
        image: nginx
        resources:
          requests:
            memory: "64Mi"        # The minimum amount of memory the container is guaranteed
            cpu: "250m"           # The minimum amount of CPU the container is guaranteed (250m = 0.25 CPU core)
          limits:
            memory: "128Mi"       # The maximum amount of memory the container can use
            cpu: "500m"           # The maximum amount of CPU the container can use (500m = 0.5 CPU core)

### ------------ DaemonSet  -----------------------------

a DaemonSet is a type of workload controller that ensures that a copy of a specific Pod runs 
on all or a subset of nodes within a cluster. It is primarily used for deploying background tasks 
that need to run on every node, such as logging, monitoring, or networking agents.

Network plugins: These pods provide network connectivity across the cluster, often using tools like Calico, Flannel, or WeaveNet.
Storage drivers: These pods manage storage volumes and file systems, ensuring consistent access to data across the cluster.
Log aggregators: These pods collect and centralize logs from various applications and systems, facilitating troubleshooting and analysis.
Monitoring agents: These pods monitor the health and performance of the cluster, providing valuable insights into resource utilization 
                  and potential issues.


### ------------ Static Pods  -----------------------------

A static pod is a special kind of pod in Kubernetes that is directly managed by the kubelet (the node agent) on individual nodes, 
rather than by the Kubernetes API server. Static pods are defined by files stored on a specific node (rather than being created 
via the Kubernetes control plane), and the kubelet monitors these pod definitions and automatically starts the pods when it sees the manifest

Static pods are not part of a ReplicaSet, Deployment, or any other Kubernetes controller. Instead, they are created 
and maintained by the kubelet on the node itself. They do not have any associated Kubernetes API objects 
(like pods in a Deployment), and they are not visible via kubectl get pods unless you look at the node itself.

Static pods are created using pod manifest files stored in a specific directory on the node. For example, 
if you store a pod manifest in /etc/kubernetes/manifests, the kubelet will automatically detect and create the static pod.

Static pods gets its name like this -> <PodName>-<NodeName>